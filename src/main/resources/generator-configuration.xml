<?xml version="1.0" encoding="UTF-8" ?>
<!--mybatis的代码生成器相关配置-->
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 引入配置文件 -->
    <!--<properties resource="application-dev.properties"/>-->

    <!--用于指定数据源驱动包（jar或者zip）的绝对路径，具体选择什么驱动包取决于连接什么类型的数据源-->
    <!--<classPathEntry location="D:/mysql-connector-java-5.0.8-bin.jar" />-->

    <!-- 一个数据库一个context
        context的子元素必须按照它给出的顺序:
        property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,
        javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+

        targetRuntime属性的可选值:
        MyBatis3DynamicSql 默认值，不会生成XML映射文件，Mapper全部注解化，使用纯注解maven需要引入mybatis-dynamic-sql
        MyBatis3 提供基本的基于动态SQL的CRUD方法和XXXByExample方法，会生成XML映射文件
        MyBatis3Simple 	提供基本的基于动态SQL的CRUD方法，会生成XML映射文件

        defaultModelType：控制实体类的生成行为。执行引擎为MyBatis3DynamicSql或者MyBatis3Kotlin时忽略此配置，可选值：
        conditional：默认值，类似hierarchical，但是只有一个主键的时候会合并所有属性生成在同一个类
        flat：所有内容全部生成在一个对象中
        hierarchical：键生成一个XXKey对象，Blob等单独生成一个对象，其他简单属性在一个对象中
    -->
    <context id="myContext" targetRuntime="MyBatis3" defaultModelType="flat">

        <!-- 这个插件给生成的Java模型对象增加了equals和hashCode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->
        <!--让生成的实体类自动实现java.io.Serializable接口并且添加serialVersionUID属性-->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->

        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否不生成注释 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <!--<property name="suppressDate" value="true"/>-->
            <!-- 添加 db 表中字段的注释，只有suppressAllComments为false时才生效-->
            <!--<property name="addRemarkComments" value="true"/>-->
        </commentGenerator>


        <!-- jdbc连接 -->
        <!--<jdbcConnection driverClass="${spring.datasource.driverClassName}" connectionURL="${spring.datasource.url}" userId="${spring.datasource.username}" password="${spring.datasource.password}">-->
        <!--    &lt;!&ndash;高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true&ndash;&gt;-->
        <!--    <property name="nullCatalogMeansCurrent" value="true"/>-->
        <!--</jdbcConnection>-->
        <jdbcConnection
                driverClass=""
                connectionURL=""
                userId=""
                password="">
            <!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true-->
            <!--<property name="nullCatalogMeansCurrent" value="true"/>-->
        </jdbcConnection>

        <!-- 类型转换 使用自定义实现 -->
        <javaTypeResolver type="org.zsz.mybatiscodegen.config.NumberToIntJavaTypeResolver">
            <!--是否使用bigDecimal，默认false。
                false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
                true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal-->
            <property name="forceBigDecimals" value="true"/>
            <!--默认false
                false，将所有 JDBC 的时间类型解析为 java.util.Date
                true，将 JDBC 的时间类型按如下规则解析
                    DATE	                -> java.time.LocalDate
                    TIME	                -> java.time.LocalTime
                    TIMESTAMP               -> java.time.LocalDateTime
                    TIME_WITH_TIMEZONE  	-> java.time.OffsetTime
                    TIMESTAMP_WITH_TIMEZONE	-> java.time.OffsetDateTime
                -->
            <!--<property name="useJSR310Types" value="false"/>-->
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="org.zsz.gen.entity" targetProject="src/main/java">
            <!-- 是否让 schema 作为包的后缀，默认为false -->
            <!--<property name="enableSubPackages" value="false"/>-->
            <!-- 是否针对string类型的字段在set方法中进行修剪，默认false -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        <!-- 生成Mapper.xml文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!--<property name="enableSubPackages" value="false"/>-->
        </sqlMapGenerator>

        <!-- 生成 XxxMapper.java 接口
            type属性的可选值如下：
            ANNOTATEDMAPPER：Mapper接口生成的时候依赖于注解和SqlProviders，不会生成XML映射文件
            XMLMAPPER：Mapper接口生成接口方法，对应的实现代码生成在XML映射文件中
            MIXEDMAPPER：Mapper接口生成的时候复杂的方法实现生成在XML映射文件中，而简单的实现通过注解和SqlProviders实现
        -->
        <javaClientGenerator targetPackage="org.zsz.gen.dao" targetProject="src/main/java" type="XMLMAPPER">
            <!--<property name="enableSubPackages" value="false"/>-->
        </javaClientGenerator>

        <!-- schema为数据库名，oracle需要配置，mysql不需要配置。
             tableName为对应的数据库表名
             domainObjectName 是要生成的实体类名(可以不指定，默认按帕斯卡命名法将表名转换成类名)
             enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false
             -->
        <table
                schema=""
                tableName="db_users"
                domainObjectName="DbUsers"
                enableCountByExample="false"
                enableDeleteByExample="false"
                enableSelectByExample="false"
                enableUpdateByExample="false"
                selectByExampleQueryId="false">
            <!--是否使用实际列名,默认为false-->
            <!--<property name="useActualColumnNames" value="false" />-->
            <!-- 用于指定主键生成的规则
                    column：指定主键列
                    sqlStatement：查询主键的SQL语句，例如填写了MySql，则使用SELECT LAST_INSERT_ID()
                    type：可选值为pre或者post，pre指定selectKey标签的order为BEFORE，post指定selectKey标签的order为AFTER
                    identity：true的时候，指定selectKey标签的order为AFTER
            -->
            <!--<generatedKey column="id" sqlStatement="MySql" type="post" identity="true" />-->
        </table>
    </context>
</generatorConfiguration>